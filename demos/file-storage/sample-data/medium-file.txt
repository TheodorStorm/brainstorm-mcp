BRAINSTORM MCP - EXTENDED TECHNICAL REFERENCE
==============================================

This document provides comprehensive technical details about the Brainstorm MCP server implementation, including architecture decisions, performance characteristics, and deployment considerations.

CHAPTER 1: ARCHITECTURE OVERVIEW
---------------------------------

The Brainstorm MCP server implements a three-layer architecture designed for clarity, maintainability, and future extensibility. Each layer has well-defined responsibilities and interfaces.

Layer 1: MCP Protocol Layer
The protocol layer implements the Model Context Protocol specification. It handles:
- JSON-RPC message parsing and validation
- Tool definition and registration
- Request routing and response formatting
- Error handling and status codes
- Long-polling connection management

The AgentCoopServer class serves as the main entry point, implementing the MCP server interface. It uses the stdio transport for communication with MCP clients, ensuring compatibility with the standard Claude Code integration.

Layer 2: Storage Abstraction Layer
The storage layer provides a clean abstraction over persistence mechanisms. The FileSystemStorage class implements atomic operations for:
- Project creation and deletion
- Agent registration and status updates
- Message queuing and delivery
- Resource storage and retrieval
- Concurrency control via file locking

All operations are designed to map directly to SQL transactions, making database migration straightforward when needed.

Layer 3: Type System
The type system defines core data models using TypeScript interfaces. All types include schema_version fields for forward compatibility and migration support.


CHAPTER 2: FILE SYSTEM STORAGE IMPLEMENTATION
----------------------------------------------

The current implementation uses the file system as a persistence layer. This choice provides several advantages for the initial release:

1. Zero Dependencies: No database setup required
2. Portability: Works across all platforms
3. Transparency: Easy to inspect and debug
4. Simplicity: Straightforward implementation

Storage Layout:
<root>/
  agents/<agent-id>/
    metadata.json      # Immutable: project, capabilities, labels
    status.json        # Mutable: online status, last_seen
    inbox/            # Incoming messages
    sent/             # Processed messages
  channels/<channel-id>/
    metadata.json     # Channel configuration
    members.json      # Current member list
    backlog/         # Message history
  resources/shared/<resource-id>/
    manifest.json     # Metadata and permissions
    payload/data      # Actual content
  locks/             # Lock files for concurrency
  system/
    config.json      # Server configuration
    audit.log        # Activity log


CHAPTER 3: ATOMIC OPERATIONS
-----------------------------

All storage operations follow a strict protocol to ensure atomicity and durability:

Step 1: Prepare
- Validate all inputs
- Check permissions
- Acquire necessary locks

Step 2: Write
- Create temporary file with .tmp extension
- Write complete content to temp file
- Call fsync() to force write to disk

Step 3: Commit
- Atomically rename temp file to final name
- Release all locks
- Update audit log

This approach prevents partial writes and ensures consistency even if the process crashes or the system loses power during an operation.


CHAPTER 4: CONCURRENCY CONTROL
-------------------------------

Multiple agents may attempt to access the same resources simultaneously. The lock system prevents race conditions:

Lock Acquisition:
1. Create lock file using exclusive creation flag (O_CREAT|O_EXCL)
2. Write lock metadata: PID, timestamp, operation
3. Return lock handle to caller

Lock Release:
1. Verify lock is still valid (check PID and timestamp)
2. Delete lock file
3. Log lock duration

Stale Lock Detection:
- Locks older than 30 seconds are considered stale
- Automatic cleanup removes abandoned locks
- Debug logging tracks all lock operations

Timeout Protection:
- Maximum wait time: 60 seconds (configurable)
- Exponential backoff for lock acquisition
- Clear error messages for timeout situations


CHAPTER 5: SECURITY MODEL
--------------------------

Security is enforced at multiple levels:

Input Validation:
- All user-controlled identifiers validated with assertSafeId()
- Whitelist regex: [A-Za-z0-9_-]{1,256}
- Explicit checks for path traversal sequences (.., /, \)
- Length limits prevent resource exhaustion

Permission Enforcement:
- Deny-by-default model
- Explicit read and write arrays required
- "*" wildcard for public read access
- Immutable permissions prevent privilege escalation

Path Security:
- All file paths must be absolute
- Home directory restriction enforced
- Symlink following disabled
- No TOCTOU vulnerabilities

Payload Validation:
- JSON nesting depth limited to 100 levels
- Inline content limited to 10KB
- File references limited to 500KB (configurable)
- Content-type validation


CHAPTER 6: MESSAGE FLOW
------------------------

Messages flow through the system following this pattern:

Direct Messages:
1. Sender calls send_message with to_agent parameter
2. Message written directly to recipient's inbox/
3. Recipient retrieves via receive_messages
4. Message moved to sent/ after acknowledgment

Broadcast Messages:
1. Sender calls send_message with broadcast: true
2. System retrieves list of all project members
3. Message copied to each member's inbox/
4. Each recipient processes independently

Long-Polling:
1. Client calls receive_messages with wait: true
2. Server checks inbox/ for existing messages
3. If empty, server waits up to timeout_seconds
4. Server polls inbox/ every 100ms
5. Returns immediately when message arrives


CHAPTER 7: RESOURCE STORAGE
----------------------------

Resources support two storage mechanisms:

Inline Storage (< 10KB):
- Content stored directly in manifest.json
- Best for configuration, metadata, small documents
- Fast access, no external dependencies
- Subject to JSON parsing overhead

File Reference (> 10KB):
- Path stored in manifest.json
- Content remains in original location
- No duplication, efficient for large files
- Requires file system access

Permission Model:
{
  "permissions": {
    "read": ["agent1", "agent2", "*"],
    "write": ["creator-agent"]
  }
}

Read permission checked on get_resource
Write permission checked on store_resource (updates)
Permissions are immutable after creation


CHAPTER 8: PERFORMANCE CHARACTERISTICS
---------------------------------------

Current implementation performance metrics:

Operation Latencies (median):
- create_project: 5ms
- join_project: 3ms
- send_message: 2ms
- receive_messages (no wait): 1ms
- receive_messages (with wait): 100ms polling interval
- store_resource (inline): 2ms
- store_resource (reference): 1ms
- get_resource (inline): 2ms
- get_resource (reference): 1ms

Throughput:
- Messages/second: ~500 (single agent)
- Resources/second: ~200 (mixed inline/reference)
- Concurrent agents: Limited by file system I/O

Scalability:
- Projects: 1000+ supported
- Agents per project: 100+ supported
- Messages per project: 10000+ supported
- Resources per project: 1000+ supported


CHAPTER 9: ERROR HANDLING
--------------------------

The system provides detailed error messages for all failure scenarios:

Common Errors:
- RESOURCE_NOT_FOUND: Check resource ID spelling
- PERMISSION_DENIED: Verify agent has required permission
- PAYLOAD_TOO_LARGE: Use file reference instead of inline
- PATH_OUTSIDE_HOME: Ensure file is in home directory
- CONCURRENT_MODIFICATION: Retry with exponential backoff
- LOCK_TIMEOUT: System is under heavy load
- INVALID_IDENTIFIER: Use only [A-Za-z0-9_-]

All errors include:
- Human-readable message
- Error code for programmatic handling
- Context information (resource ID, agent name, etc.)
- Suggested remediation steps


CHAPTER 10: MIGRATION TO DATABASE
----------------------------------

The current file system implementation is designed for easy migration to a database:

Mapping Strategy:
- agents/<id>/metadata.json -> agents table
- agents/<id>/status.json -> agent_status table
- messages -> messages table
- resources/shared/<id>/ -> resources table
- locks/ -> row-level locks or optimistic locking

Schema Design:
- All UUIDs become primary keys
- JSON files map to columns with same names
- Foreign keys enforce referential integrity
- Indexes on frequently queried fields

Code Changes:
- Replace FileSystemStorage with DatabaseStorage
- Implement same interface methods
- Use transactions instead of file locks
- Keep MCP layer unchanged

Performance Benefits:
- 10-100x faster for message querying
- Better concurrent access handling
- Native transaction support
- Full-text search capabilities


CONCLUSION
----------

The Brainstorm MCP server provides a robust foundation for multi-agent collaboration. The three-layer architecture ensures maintainability, the file system storage enables zero-dependency deployment, and the security model protects against common vulnerabilities.

Future enhancements may include database migration, channel-based messaging, and enhanced monitoring capabilities.

For more information, visit: https://github.com/anthropics/brainstorm


APPENDIX A: DETAILED API REFERENCE
===================================

This appendix provides comprehensive documentation for all MCP tools exposed by the Brainstorm server.

create_project
--------------
Creates a new cooperation project.

Parameters:
- project_id (required): Unique identifier [A-Za-z0-9_-]{1,256}
- name (required): Human-readable project name
- description (optional): Project description and goals
- created_by (optional): Agent name creating the project
- context (optional): Additional context object

Returns:
- success: boolean
- project_id: string
- created_at: ISO 8601 timestamp

Errors:
- PROJECT_EXISTS: Project with this ID already exists
- INVALID_IDENTIFIER: project_id contains invalid characters

Example:
{
  "project_id": "code-review-2024",
  "name": "Q4 Code Review Initiative",
  "description": "Collaborative code review for all Q4 features",
  "created_by": "lead-reviewer",
  "context": {
    "deadline": "2024-12-31",
    "repositories": ["frontend", "backend", "mobile"]
  }
}

join_project
------------
Registers an agent within a project.

Parameters:
- project_id (required): Project to join
- agent_name (required): Your identifier within project [A-Za-z0-9_-]{1,256}
- capabilities (optional): Array of capability strings
- labels (optional): Key-value metadata object

Returns:
- success: boolean
- agent_id: UUID
- joined_at: ISO 8601 timestamp

Errors:
- PROJECT_NOT_FOUND: Project does not exist
- AGENT_EXISTS: Agent name already taken in project
- INVALID_IDENTIFIER: agent_name contains invalid characters

Example:
{
  "project_id": "code-review-2024",
  "agent_name": "security-auditor",
  "capabilities": ["security", "audit", "compliance"],
  "labels": {
    "specialization": "OWASP",
    "experience": "senior"
  }
}

send_message
------------
Sends a message to another agent or broadcasts to all members.

Parameters:
- project_id (required): Project context
- from_agent (required): Your agent name
- to_agent (optional): Recipient for direct messages
- broadcast (optional): If true, send to all members
- reply_expected (required): Whether you will wait for a response
- payload (required): Message content object
- metadata (optional): Priority, trace_id, etc.

Returns:
- success: boolean
- message_id: UUID
- sent_at: ISO 8601 timestamp

Errors:
- PROJECT_NOT_FOUND: Project does not exist
- AGENT_NOT_FOUND: Recipient agent not in project
- INVALID_PAYLOAD: Payload exceeds size limit or nesting depth

Example (Direct Message):
{
  "project_id": "code-review-2024",
  "from_agent": "security-auditor",
  "to_agent": "lead-reviewer",
  "reply_expected": true,
  "payload": {
    "type": "vulnerability_report",
    "severity": "high",
    "file": "auth/login.ts",
    "issue": "SQL injection vulnerability in line 42"
  }
}

Example (Broadcast):
{
  "project_id": "code-review-2024",
  "from_agent": "lead-reviewer",
  "broadcast": true,
  "reply_expected": false,
  "payload": {
    "type": "announcement",
    "message": "Code review complete. All issues addressed. Merging to main."
  }
}

receive_messages
----------------
Retrieves messages from your inbox with optional long-polling.

Parameters:
- project_id (required): Project context
- agent_name (required): Your agent name
- wait (optional): If true, block until message arrives
- timeout_seconds (optional): Maximum wait time (max 900)
- limit (optional): Maximum messages to retrieve

Returns:
- messages: Array of message objects
- count: Number of messages returned
- has_more: Boolean indicating more messages available

Errors:
- PROJECT_NOT_FOUND: Project does not exist
- AGENT_NOT_FOUND: Agent not in project
- TIMEOUT: No messages received within timeout period

Example:
{
  "project_id": "code-review-2024",
  "agent_name": "security-auditor",
  "wait": true,
  "timeout_seconds": 300,
  "limit": 10
}

Response:
{
  "messages": [
    {
      "message_id": "550e8400-e29b-41d4-a716-446655440000",
      "from_agent": "lead-reviewer",
      "to_agent": "security-auditor",
      "payload": {
        "type": "review_request",
        "file": "api/routes.ts"
      },
      "sent_at": "2024-10-08T15:30:00Z"
    }
  ],
  "count": 1,
  "has_more": false
}

acknowledge_message
-------------------
Marks a message as processed, removing it from inbox.

Parameters:
- project_id (required): Project context
- agent_name (required): Your agent name
- message_id (required): UUID of message to acknowledge

Returns:
- success: boolean

Errors:
- MESSAGE_NOT_FOUND: Message not in your inbox
- AGENT_NOT_FOUND: Agent not in project

Example:
{
  "project_id": "code-review-2024",
  "agent_name": "security-auditor",
  "message_id": "550e8400-e29b-41d4-a716-446655440000"
}

store_resource
--------------
Stores a shared resource using inline content or file reference.

Parameters:
- project_id (required): Project context
- resource_id (required): Unique identifier [A-Za-z0-9_-]{1,256}
- name (required): Human-readable resource name
- creator_agent (required): Your agent name
- description (optional): Resource description
- mime_type (optional): Content MIME type
- content (optional): Inline content string (<10KB)
- local_path (optional): Absolute path to file (>10KB, must be in home directory)
- permissions (required): Read/write access control
- etag (optional): For updates, pass the etag from when you read the resource

Returns:
- success: boolean
- resource_id: string
- etag: string (opaque version identifier)

Errors:
- PAYLOAD_TOO_LARGE: Content exceeds size limits
- PATH_OUTSIDE_HOME: File path not in home directory
- PERMISSION_DENIED: No write access
- ETAG_MISMATCH: Resource was modified since you read it

Example (Inline):
{
  "project_id": "code-review-2024",
  "resource_id": "security-checklist",
  "name": "Security Review Checklist",
  "creator_agent": "security-auditor",
  "description": "OWASP Top 10 checklist for code review",
  "mime_type": "application/json",
  "content": "{\"items\": [...]}",
  "permissions": {
    "read": ["*"],
    "write": ["security-auditor", "lead-reviewer"]
  }
}

Example (File Reference):
{
  "project_id": "code-review-2024",
  "resource_id": "security-report",
  "name": "Q4 Security Audit Report",
  "creator_agent": "security-auditor",
  "description": "Comprehensive security audit findings",
  "mime_type": "application/pdf",
  "local_path": "/Users/auditor/reports/q4-security-audit.pdf",
  "permissions": {
    "read": ["security-auditor", "lead-reviewer"],
    "write": ["security-auditor"]
  }
}

get_resource
------------
Retrieves a shared resource by ID.

Parameters:
- project_id (required): Project context
- resource_id (required): Resource identifier
- agent_name (required): Your agent name (for permission check)
- wait (optional): If true, block until resource exists
- timeout_seconds (optional): Maximum wait time (max 900)

Returns:
- resource_id: string
- name: string
- description: string
- mime_type: string
- content: string (for inline storage)
- local_path: string (for file reference)
- permissions: object
- creator_agent: string
- created_at: ISO 8601 timestamp
- etag: string (opaque version identifier)

Errors:
- RESOURCE_NOT_FOUND: Resource does not exist
- PERMISSION_DENIED: No read access
- TIMEOUT: Resource not created within timeout

Example:
{
  "project_id": "code-review-2024",
  "resource_id": "security-checklist",
  "agent_name": "lead-reviewer",
  "wait": false
}

list_resources
--------------
Lists all resources you have access to in a project.

Parameters:
- project_id (required): Project context
- agent_name (required): Your agent name (for filtering)

Returns:
- resources: Array of resource summary objects
- count: Number of resources

Errors:
- PROJECT_NOT_FOUND: Project does not exist
- AGENT_NOT_FOUND: Agent not in project

Example:
{
  "project_id": "code-review-2024",
  "agent_name": "security-auditor"
}

Response:
{
  "resources": [
    {
      "resource_id": "security-checklist",
      "name": "Security Review Checklist",
      "mime_type": "application/json",
      "creator_agent": "security-auditor",
      "created_at": "2024-10-08T10:00:00Z"
    },
    {
      "resource_id": "security-report",
      "name": "Q4 Security Audit Report",
      "mime_type": "application/pdf",
      "creator_agent": "security-auditor",
      "created_at": "2024-10-08T11:30:00Z"
    }
  ],
  "count": 2
}

get_project_info
----------------
Retrieves project metadata and member list.

Parameters:
- project_id (required): Project identifier
- wait (optional): If true, block until project exists
- timeout_seconds (optional): Maximum wait time (max 900)

Returns:
- project_id: string
- name: string
- description: string
- created_by: string
- created_at: ISO 8601 timestamp
- context: object
- members: Array of agent metadata objects

Errors:
- PROJECT_NOT_FOUND: Project does not exist
- TIMEOUT: Project not created within timeout

Example:
{
  "project_id": "code-review-2024",
  "wait": false
}

heartbeat
---------
Updates your online status in the project.

Parameters:
- project_id (required): Project context
- agent_name (required): Your agent name
- online (required): Boolean online status

Returns:
- success: boolean
- last_seen: ISO 8601 timestamp

Errors:
- AGENT_NOT_FOUND: Agent not in project

Example:
{
  "project_id": "code-review-2024",
  "agent_name": "security-auditor",
  "online": true
}

delete_project
--------------
Deletes a project (creator only).

Parameters:
- project_id (required): Project to delete
- agent_name (required): Your agent name (must match creator)

Returns:
- success: boolean

Errors:
- PROJECT_NOT_FOUND: Project does not exist
- PERMISSION_DENIED: Only creator can delete
- PROJECT_HAS_NO_CREATOR: Safety measure, cannot delete

Example:
{
  "project_id": "code-review-2024",
  "agent_name": "lead-reviewer"
}


APPENDIX B: SECURITY BEST PRACTICES
====================================

Input Validation
----------------
Always validate user-controlled inputs:
- Use assertSafeId() for all identifiers
- Check string lengths before processing
- Validate JSON structure before parsing
- Sanitize error messages to prevent information disclosure

Permission Management
---------------------
Follow principle of least privilege:
- Grant only necessary read permissions
- Limit write access to resource creators
- Use explicit agent names instead of "*" when possible
- Review permissions regularly

Path Security
-------------
Protect against path traversal:
- Always use absolute paths
- Verify paths are within home directory
- Disable symlink following
- Validate file existence before operations

Payload Handling
----------------
Prevent resource exhaustion:
- Enforce size limits for all payloads
- Limit JSON nesting depth
- Validate MIME types
- Use file references for large content

Rate Limiting
-------------
Protect against DoS attacks:
- Limit concurrent long-polling connections per agent
- Implement exponential backoff for retries
- Set reasonable timeout values
- Monitor resource usage


APPENDIX C: DEPLOYMENT GUIDE
=============================

Installation
------------
1. Install Node.js 18 or later
2. Clone repository: git clone https://github.com/anthropics/brainstorm
3. Install dependencies: npm install
4. Build TypeScript: npm run build
5. Configure MCP: npm run config

Configuration
-------------
Environment variables:
- BRAINSTORM_STORAGE: Custom storage path (default: ~/.brainstorm)
- BRAINSTORM_MAX_PAYLOAD_SIZE: Maximum file size in bytes (default: 524288)

MCP Integration
---------------
Add to ~/.claude/mcp_config.json:
{
  "mcpServers": {
    "brainstorm": {
      "command": "node",
      "args": ["/path/to/brainstorm/dist/src/index.js"]
    }
  }
}

Monitoring
----------
- Check audit.log for activity history
- Monitor storage directory size
- Track lock file counts
- Review error rates

Backup
------
Back up the following directories:
- <storage>/agents/
- <storage>/resources/
- <storage>/system/

Do not back up:
- <storage>/locks/ (transient)
- <storage>/agents/*/inbox/ (can be regenerated)

Maintenance
-----------
Periodic tasks:
- Clean up completed projects
- Archive old audit logs
- Remove stale lock files
- Verify storage integrity


APPENDIX D: PERFORMANCE OPTIMIZATION GUIDE
===========================================

This appendix provides detailed strategies for optimizing Brainstorm performance in production environments.

File System Optimization
------------------------

SSD vs HDD:
- SSDs provide 10-100x better performance for random I/O operations
- Lock acquisition latency: 1ms (SSD) vs 10-50ms (HDD)
- Message delivery throughput: 500/sec (SSD) vs 50/sec (HDD)
- Recommendation: Use SSD storage for production deployments

File System Choice:
- ext4: Good general purpose performance, tested and stable
- XFS: Better for large files and concurrent access patterns
- ZFS: Advanced features (snapshots, compression) with moderate overhead
- BTRFS: Good for development, avoid for production (stability concerns)

Directory Structure:
- Flat hierarchies perform better than deeply nested structures
- Current design (3 levels max) optimized for filesystem cache
- Inode cache hit rate: ~95% for active projects

Caching Strategy:
- Linux page cache automatically caches frequently accessed files
- Typical cache hit rate: 80-90% for message retrieval
- Monitor cache effectiveness: cat /proc/meminfo | grep -i cache

Message Queuing Optimization
-----------------------------

Batch Operations:
- Send multiple messages in a single operation when possible
- Reduces fsync() calls from N to 1
- 5-10x performance improvement for bulk operations

Long-Polling Tuning:
- Default poll interval: 100ms
- Lower intervals (50ms): Better latency, higher CPU usage
- Higher intervals (200ms): Lower CPU, acceptable latency for most use cases
- Recommendation: 100ms is optimal for most scenarios

Inbox Management:
- Archive processed messages instead of deleting
- Prevents inode exhaustion on busy systems
- Implement periodic cleanup job (weekly or monthly)

Lock Contention Reduction:
- Keep lock hold time minimal (current: <5ms typical)
- Use lock-free reads where possible (immutable data)
- Monitor lock wait times via audit log
- Scale out to multiple storage roots if contention is high

Resource Storage Optimization
------------------------------

Content Size Distribution:
- <1KB: 60% of resources (configs, metadata)
- 1-10KB: 25% of resources (documents, small data)
- 10-50KB: 10% of resources (reports, medium data)
- 50-500KB: 5% of resources (large files, images)

Storage Strategy:
- Inline storage for <10KB: Zero overhead, fast access
- File reference for >10KB: No duplication, efficient disk usage
- Compression for >100KB: 50-70% size reduction for text

Deduplication:
- File reference naturally deduplicates (same file referenced multiple times)
- Implement content-addressable storage for inline resources (future enhancement)
- Potential savings: 20-30% for typical workloads

Scalability Limits
------------------

Current Implementation:
- Projects: 1000+ supported
- Agents per project: 100+ supported
- Messages per agent: 10000+ supported
- Resources per project: 1000+ supported
- Concurrent agents: 50+ supported

Bottlenecks:
- File system I/O for message delivery
- Lock contention during concurrent writes
- Directory listing performance for large inboxes
- Audit log size growth

Mitigation Strategies:
- Implement message partitioning (monthly/weekly)
- Use lock-free data structures where possible
- Implement pagination for resource listing
- Rotate audit logs periodically

Database Migration Performance
-------------------------------

Expected Improvements:
- Message querying: 10-100x faster with indexes
- Concurrent access: No lock contention with row-level locking
- Resource listing: Instant with proper indexes
- Full-text search: Native database support

Migration Strategy:
- Start with read-write split: reads from DB, writes to both
- Gradually migrate projects to DB-only mode
- Keep file system as backup for critical data
- Validate consistency before switching entirely

Database Selection:
- PostgreSQL: Best overall choice, robust, feature-rich
- SQLite: Good for single-server deployments
- MySQL: Acceptable, but PostgreSQL preferred
- Avoid: MongoDB (poor transaction support)

Monitoring and Metrics
----------------------

Key Performance Indicators:
- Message delivery latency (p50, p95, p99)
- Lock acquisition wait time
- Storage directory size growth rate
- Audit log size
- Error rate by operation type

Monitoring Tools:
- Custom metrics via audit log analysis
- System metrics: iostat, vmstat, sar
- File system metrics: df, du, lsof
- Application metrics: process memory, CPU usage

Alerting Thresholds:
- Message latency p95 > 100ms: Investigate I/O bottleneck
- Lock wait time p95 > 50ms: Reduce contention or scale out
- Error rate > 1%: Check logs for systematic issues
- Storage growth > 1GB/day: Review cleanup policies

Capacity Planning
-----------------

Resource Requirements:
- CPU: 1 core per 50 concurrent agents
- Memory: 100MB base + 1MB per active agent
- Storage: 1GB per 1000 projects (typical)
- I/O: 1000 IOPS minimum for responsive performance

Scaling Strategy:
- Vertical: Add more CPU/RAM to handle more agents
- Horizontal: Partition projects across multiple servers
- Hybrid: Use database for metadata, file storage for content

Growth Projections:
- Linear growth: 10 projects/week -> 520/year -> 5.2GB storage
- Exponential growth: Plan for 10x capacity within 6 months
- Peak load: Design for 5x average load



APPENDIX D: PERFORMANCE OPTIMIZATION GUIDE
===========================================

This appendix provides detailed strategies for optimizing Brainstorm performance in production environments.

File System Optimization
------------------------

SSD vs HDD:
- SSDs provide 10-100x better performance for random I/O operations
- Lock acquisition latency: 1ms (SSD) vs 10-50ms (HDD)
- Message delivery throughput: 500/sec (SSD) vs 50/sec (HDD)
- Recommendation: Use SSD storage for production deployments

File System Choice:
- ext4: Good general purpose performance, tested and stable
- XFS: Better for large files and concurrent access patterns
- ZFS: Advanced features (snapshots, compression) with moderate overhead
- BTRFS: Good for development, avoid for production (stability concerns)

Directory Structure:
- Flat hierarchies perform better than deeply nested structures
- Current design (3 levels max) optimized for filesystem cache
- Inode cache hit rate: ~95% for active projects

Caching Strategy:
- Linux page cache automatically caches frequently accessed files
- Typical cache hit rate: 80-90% for message retrieval
- Monitor cache effectiveness: cat /proc/meminfo | grep -i cache

Message Queuing Optimization
-----------------------------

Batch Operations:
- Send multiple messages in a single operation when possible
- Reduces fsync() calls from N to 1
- 5-10x performance improvement for bulk operations

Long-Polling Tuning:
- Default poll interval: 100ms
- Lower intervals (50ms): Better latency, higher CPU usage
- Higher intervals (200ms): Lower CPU, acceptable latency for most use cases
- Recommendation: 100ms is optimal for most scenarios

Inbox Management:
- Archive processed messages instead of deleting
- Prevents inode exhaustion on busy systems
- Implement periodic cleanup job (weekly or monthly)

Lock Contention Reduction:
- Keep lock hold time minimal (current: <5ms typical)
- Use lock-free reads where possible (immutable data)
- Monitor lock wait times via audit log
- Scale out to multiple storage roots if contention is high

Resource Storage Optimization
------------------------------

Content Size Distribution:
- <1KB: 60% of resources (configs, metadata)
- 1-10KB: 25% of resources (documents, small data)
- 10-50KB: 10% of resources (reports, medium data)
- 50-500KB: 5% of resources (large files, images)

Storage Strategy:
- Inline storage for <10KB: Zero overhead, fast access
- File reference for >10KB: No duplication, efficient disk usage
- Compression for >100KB: 50-70% size reduction for text

Deduplication:
- File reference naturally deduplicates (same file referenced multiple times)
- Implement content-addressable storage for inline resources (future enhancement)
- Potential savings: 20-30% for typical workloads

Scalability Limits
------------------

Current Implementation:
- Projects: 1000+ supported
- Agents per project: 100+ supported
- Messages per agent: 10000+ supported
- Resources per project: 1000+ supported
- Concurrent agents: 50+ supported

Bottlenecks:
- File system I/O for message delivery
- Lock contention during concurrent writes
- Directory listing performance for large inboxes
- Audit log size growth

Mitigation Strategies:
- Implement message partitioning (monthly/weekly)
- Use lock-free data structures where possible
- Implement pagination for resource listing
- Rotate audit logs periodically

Database Migration Performance
-------------------------------

Expected Improvements:
- Message querying: 10-100x faster with indexes
- Concurrent access: No lock contention with row-level locking
- Resource listing: Instant with proper indexes
- Full-text search: Native database support

Migration Strategy:
- Start with read-write split: reads from DB, writes to both
- Gradually migrate projects to DB-only mode
- Keep file system as backup for critical data
- Validate consistency before switching entirely

Database Selection:
- PostgreSQL: Best overall choice, robust, feature-rich
- SQLite: Good for single-server deployments
- MySQL: Acceptable, but PostgreSQL preferred
- Avoid: MongoDB (poor transaction support)

Monitoring and Metrics
----------------------

Key Performance Indicators:
- Message delivery latency (p50, p95, p99)
- Lock acquisition wait time
- Storage directory size growth rate
- Audit log size
- Error rate by operation type

Monitoring Tools:
- Custom metrics via audit log analysis
- System metrics: iostat, vmstat, sar
- File system metrics: df, du, lsof
- Application metrics: process memory, CPU usage

Alerting Thresholds:
- Message latency p95 > 100ms: Investigate I/O bottleneck
- Lock wait time p95 > 50ms: Reduce contention or scale out
- Error rate > 1%: Check logs for systematic issues
- Storage growth > 1GB/day: Review cleanup policies

Capacity Planning
-----------------

Resource Requirements:
- CPU: 1 core per 50 concurrent agents
- Memory: 100MB base + 1MB per active agent
- Storage: 1GB per 1000 projects (typical)
- I/O: 1000 IOPS minimum for responsive performance

Scaling Strategy:
- Vertical: Add more CPU/RAM to handle more agents
- Horizontal: Partition projects across multiple servers
- Hybrid: Use database for metadata, file storage for content

Growth Projections:
- Linear growth: 10 projects/week -> 520/year -> 5.2GB storage
- Exponential growth: Plan for 10x capacity within 6 months
- Peak load: Design for 5x average load



APPENDIX E: TROUBLESHOOTING COMMON ISSUES
==========================================


Issue #1: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #2: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #3: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #4: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #5: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #6: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #7: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #8: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #9: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #10: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #11: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #12: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #13: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #14: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #15: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #16: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #17: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #18: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #19: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #20: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #21: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #22: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #23: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #24: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #25: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #26: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #27: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #28: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #29: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #30: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #31: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #32: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #33: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #34: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #35: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #36: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #37: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #38: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #39: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #40: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #41: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #42: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #43: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #44: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #45: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #46: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #47: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #48: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #49: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits


Issue #50: Message Delivery Delay
------------------------------------
Symptoms:
- Messages taking longer than expected to arrive
- Intermittent delays of 5-10 seconds
- Long-polling timeouts occurring frequently
- System responsiveness degraded

Root Causes:
- High disk I/O contention from other processes
- File system cache pressure from memory constraints
- Network file system (NFS) latency if storage is remote
- Lock contention from too many concurrent agents
- System under heavy load (CPU/memory saturation)

Diagnostic Steps:
1. Check system load: uptime, top, htop
2. Monitor disk I/O: iostat -x 1
3. Review lock wait times in audit log
4. Check file system type and mount options
5. Verify storage path is on local disk (not NFS)
6. Monitor memory usage and swap activity

Solutions:
- Move storage to local SSD if on network storage
- Reduce number of concurrent agents or scale horizontally
- Increase system resources (CPU, RAM, faster disk)
- Tune file system mount options (noatime, data=writeback)
- Implement message batching to reduce I/O operations
- Consider database migration for better scalability

Prevention:
- Regular capacity planning and monitoring
- Set up alerting for high latency thresholds
- Performance testing under realistic load
- Gradual scaling before hitting limits
